version: '3.9'

services:
  postgres_master:
    container_name: postgres_master
    image: postgres:14.5
    hostname: postgres_master
    restart: always
    volumes:
      - ./data:/var/lib/postgresql/data
      - ./data-slave:/var/lib/postgresql/data-slave
      - ./init-script:/etc/postgresql/init-script
      - ./init-script/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./init-script/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./init-script/master_init.sh:/etc/postgresql/init-script/master_init.sh
      - ./init-script/master_db_init.sh:/etc/postgresql/init-script/master_db_init.sh
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U postgres"] #More robust check
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_slave:
    container_name: postgres_slave
    image: postgres:14.5
    hostname: postgres_slave
    restart: always
    volumes:
      - ./data-slave:/var/lib/postgresql/data
      - ./init-script:/etc/postgresql/init-script
      - ./init-script/slave-config/postgresql.auto.conf:/etc/postgresql/postgresql.auto.conf
      - ./init-script/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./init-script/config/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "127.0.0.1:5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres


  # zookeeper - for Apache Kafka
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper1
    container_name: zookeeper1
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr
      start_period: 10s
      retries: 20
      interval: 10s
  
  # Apache Kafka
  broker1:
    image: confluentinc/cp-kafka:7.3.1
    hostname: broker1
    container_name: broker1
    depends_on:
      zookeeper1:
        condition: service_healthy
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  # Debezium Backend
  debezium1:
    image: quay.io/debezium/connect:latest
    restart: always
    container_name: debezium1
    hostname: debezium1
    depends_on:
      postgres_master:
        condition: service_healthy
      broker1:
        condition: service_healthy
    ports:
      - '8083:8083'
    environment:
      BOOTSTRAP_SERVERS: broker1:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--silent',
          '--fail',
          '-X',
          'GET',
          'http://localhost:8083/connectors',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  # Debezium UI
  debezium-ui1:
    image: debezium/debezium-ui:latest
    restart: always
    container_name: debezium-ui1
    hostname: debezium-ui1
    depends_on:
      debezium1:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium1:8083
      
  # Metadata Helper
  rest-proxy1:
    image: confluentinc/cp-kafka-rest:7.3.1
    depends_on:
      broker1:
        condition: service_healthy
    ports:
      - '8082:8082'
    hostname: rest-proxy1
    container_name: rest-proxy1
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy1
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker1:29092'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
